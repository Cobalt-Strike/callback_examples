
# Filter the returned list of Windows services and only report
# on the services that are 'Running'.
#
# Arguments
# $1 - beacon id
# $2 - result - output of the 'Get-Service' powershell cmdlet
# $3 - info - Map containing information about the result
#
sub filter_running_services_inject {
   # Declare local variables
   local('$bid $result %info $output @lines $line $jid');

   # Assign parameters user friendly names
   ($bid, $result, %info) = @_;
   $jid = %info['jid'];
   #println("**** arg1 (bid): $bid");
   #print("**** arg2 (result): $result");
   #println("**** arg3 (info): " . %info);

   # Process only output and error events
   if ("output" eq %info["type"]) {
      # Process the result
      $output = "";
      @lines = split('\n', $result);
      foreach $line (@lines) {
         #println("check line: $line");
         if (substr($line, 0, 8) eq "Running ") {
            $output .= "$line\n";
         }
      }

      # Log the output back to beacon console
      bjoblog($bid, $jid, "received output:\n" . $output);
   }
   else if ("error" eq %info["type"]) {
      bjoberror($bid, $jid, $result);
   }
}

beacon_command_register(
   "cs_get_services_inject",
   "Run the powershell cmdlet Get-Service and filter on Running using bpsinject",

   "Run the powershell cmdlet Get-Service and filter on Running using bpsinject\n\n" .

   "Usage:\n" .
   "   cs_get_services_inject --pid <pid> --arch [x64|x86]\n\n" .

   "Arguments:\n" .
   "   \$1 - beacon id (CS automatically adds this argument)\n" .
   "   --pid <pid>       - pid to inject into\n" .
   "   --arch <arch>     - arch of the pid to inject into\n\n" .

   "Examples:\n" .
   "   cs_get_services_inject --pid 1234 --arch x64\n\n"
);

alias cs_get_services_inject {
   # Declare local variables
   local('$bid @valid_opts %opts $opt_cnt $opt_ind $opt $value $info');

   # Assign parameters to the opts hash map
   $bid = @_[0];
   $opt_cnt = size(@_);
   @valid_opts = @("--pid", "--arch");
   for($opt_ind = 1; $opt_ind < $opt_cnt; $opt_ind++) {
      # Set the arg and value for this iteration
      $opt = @_[$opt_ind];
      $opt_ind++;
      $value = iff( $opt_ind >= $opt_cnt, $null, @_[$opt_ind] );

      # Do some simple validation on opt and value
      if ($opt !in @valid_opts) {
         berror($bid, "$opt is not a valid option.");
         return;
      }
      if ($value is $null || $value in @valid_opts) {
         berror($bid, "Missing or invalid value for the $opt option.");
         return;
      }

      # Save the opt and value into the opts hash
      %opts[$opt] = $value;
   }

   # Validate the required options
   if (!-isnumber %opts["--pid"] || %opts["--pid"] < 0) {
      berror($bid, "pid is not a valid: " . %opts["--pid"]);
      return;
   }
   if (%opts["--arch"] !in @("x86", "x64")) {
      berror($bid, "arch is not valid, must be x86 or x64.");
      return;
   }

   # Print some info to the script console
   $info = "beacon: $bid will execute Get-Service and inject into " . %opts["--pid"] . " \(" . %opts["--arch"] . "\)";
   println("$info");

   # Execute the command
   bpsinject($bid, %opts["--pid"], %opts["--arch"], "Get-Service", &filter_running_services_inject);
   #bpsinject($bid, %opts["--pid"], %opts["--arch"], "Get-Service", { filter_running_services_inject($1, $2, $3); });
}
