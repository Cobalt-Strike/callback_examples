
# Hash map to track cs_portscan information
#    Key is beacon id
#    Value is the current information
global('%portscan_info $portscan_lock');
%portscan_info = %();
$portscan_lock = semaphore(1); # set lock to released state.

# Adds tracking information for a portscan for the beacon id
# Arguments
#    $1 - bid
#
# Returns
#    0 - if the bid already exists in the map
#    1 - if the bid is added to the map
#
sub add_portscan_info {
   # Declare local variables
   local('$bid $added %$portscan_info');

   # Assign parameters user friendly names
   ($bid) = @_;

   # Try adding the port scan information for this beacon id.
   acquire($portscan_lock);
   if ($bid in %portscan_info) {
      # println("Port scan is already in progress for process: " . binfo($bid, "process") . " pid: " . binfo($bid, "pid"));
      $added = 0;
   } else {
      # println("Starting port scan for process: " . binfo($bid, "process") . " pid: " . binfo($bid, "pid"));
      %portscan_info[$bid] = %(header => "", result => "");
      $added = 1;
   }
   # println(%portscan_info);
   release($portscan_lock);

   return $added;
}

# Removes tracking information for a portscan for the beacon id
# Arguments
#    $1 - bid
#
sub remove_portscan_info {
   # Declare local variables
   local('$bid');

   # Assign parameters user friendly names
   ($bid) = @_;

   # Remove the port scan information for this beacon id.
   acquire($portscan_lock);
   removeAt(%portscan_info, $bid);
   # println(%portscan_info);
   release($portscan_lock);
}

beacon_command_register(
   "cs_portscan_clear",
   "Clear the beacon's id entry from the tracking information",

   "Clear the beacon's id entry from the tracking information\n\n" .

   "Usage:\n" .
   "   cs_portscan_clear\n\n" .

   "This is useful if there is an issue with the previous cs_portscan job\n\n",

   "cs_callback_examples"
);

alias cs_portscan_clear {
   remove_portscan_info($1);
}

# Process the result from the portscan module and add the information
# to the previous response.  When the complete message is received
# report all of the information back to the console in single output
# so it is not mixed with other job output.
#
# Arguments
# $1 - beacon id
# $2 - result - output of the 'portscan' command
# $3 - info - Map containing information about the result
#
sub portscan_cb {
   # Declare local variables
   local('$bid $result %info @lines $line $save $completed $jid');

   # Assign parameters user friendly names
   ($bid, $result, %info) = @_;
   $jid = %info['jid'];
   #println("**** portscan_cb");
   #println("**** arg1 (bid): $bid");
   #print("**** arg2 (result): $result");
   #println("**** arg3 (info): " . %info);

   # Skip registered and complete events
   if ("job_registered" eq %info["type"] || "job_completed" eq %info["type"]) {
      return;
   }

   # Process the result and save the info
   $save = "";
   $completed = 0;
   @lines = split('\n', $result);
   foreach $line (@lines) {
      # println("check line: $line");
      if ($line eq "Scanner module is complete") {
         $completed = 1;
      } else {
         $save .= "$line\n";
      }
   }

   # Add the new information to the previous result.
   %portscan_info[$bid]["result"] .= $save;

   # Report the results back when the portscan is completed.
   if ($completed) {
      bjoblog($bid, $jid, "received output:\n" .
         %portscan_info[$bid]["header"] . "\n" .
         %portscan_info[$bid]["result"]);
      remove_portscan_info($bid);
   }
}

beacon_command_register(
   "cs_portscan", 
   "Scan a network for open services", 

   "Scan a network for open services\n\n" .

   "Usage:\n" .
   "   cs_portscan [options]\n\n" .

   "Arguments:\n" .
   "   \$1 - beacon id (CS automatically adds this argument)\n\n" .

   "Options (specified in any order):\n" .
   "   --targets <targets>  - the targets to scan (e.g., 192.168.12.0/24)\n" .
   "   --ports <ports>      - the ports to scan (e.g., 1-1024,6667)\n" .
   "   --discovery <method> - the discovery method to use (arp|icmp|none)\n" .
   "   --maxconn <max>      - the max number of sockets to use (e.g., 1024)\n" .
   "   --pid <pid>          - pid to inject into or use for fork&run\n" .
   "   --arch <arch>        - arch of the pid to inject into use for fork&run\n\n" .

   "Examples (fork and run):\n" .
   "   cs_portscan\n" .
   "   cs_portscan --targets sysA --ports 2000-3000\n\n" .

   "Examples (process injection):\n" .
   "   cs_portscan --pid 1234 --arch x64\n" .
   "   cs_portscan --pid 1234 --arch x64 --targets sysA --ports 2000-3000\n\n",

   "cs_callback_examples"
);

alias cs_portscan {
   # Declare local variables
   local('$bid @valid_opts %opts $opt_cnt $opt_ind $opt $value $info');

   $bid = @_[0];

   # Check if this bid is already running a portscan
   if (add_portscan_info($bid) == 0) {
      berror($bid, "Port scan already in progress");
      return;
   }

   # Set the defaults
   %opts["--targets"]   = binfo($bid, "internal"); # Use the IP Address
   %opts["--ports"]     = "1-1024,3389,5900-6000";
   %opts["--discovery"] = "icmp";
   %opts["--maxconn"]   = 1024;

   # Assign parameters to the opts hash map
   $opt_cnt = size(@_);
   @valid_opts = @("--targets", "--ports", "--discovery", "--maxconn", "--pid", "--arch");
   for($opt_ind = 1; $opt_ind < $opt_cnt; $opt_ind++) {
      # Set the arg and value for this iteration
      $opt = @_[$opt_ind];
      $opt_ind++;
      $value = iff( $opt_ind >= $opt_cnt, $null, @_[$opt_ind] );

      # Do some simple validation on opt and value
      if ($opt !in @valid_opts) {
         berror($bid, "$opt is not a valid option.");
         remove_portscan_info($bid);
         return;
      }
      if ($value is $null || $value in @valid_opts) {
         berror($bid, "Missing or invalid value for the $opt option.");
         remove_portscan_info($bid);
         return;
      }

      # Save the opt and value into the opts hash
      %opts[$opt] = $value;
   }

   # Validate options
   if (%opts["--discovery"] !in @("arp", "icmp", "none")) {
      berror($bid, "discover method is not valid: " . %opts["--discovery"]);
      remove_portscan_info($bid);
      return;
   }
   if ( (%opts["--pid"] !is $null) || (%opts["--arch"] !is $null) ) {
      # At least one process injection options is used, validate them.
      if (!-isnumber %opts["--pid"] || %opts["--pid"] < 0) {
         berror($bid, "pid is not a valid: " . %opts["--pid"]);
         remove_portscan_info($bid);
         return;
      }
      if (%opts["--arch"] !in @("x86", "x64")) {
         berror($bid, "arch is not valid, must be x86 or x64.");
         remove_portscan_info($bid);
         return;
      }
   }

   # Build the info message and save part of it as the output header.
   $info = "beacon: $bid will execute a portscan on \'" . %opts["--targets"] .
           "\' for ports \'" . %opts["--ports"] .
           "\' using \'" . %opts["--discovery"] .
           "\' and max connections \'" . %opts["--maxconn"] . "\'";
   %portscan_info[$bid]["header"] = substr($info, find($info, 'portscan'));


   # Print some info to the script console
   if (%opts["--pid"] >= 0 && %opts["--arch"] in @("x86", "x64")) {
      println("$info using process injection: \(\'" . %opts["--pid"] . "\' \'" . %opts["--arch"] . "\'\)");
   } else {
      println("$info using fork&run");
   }

   # Execute the command
   bportscan($bid, %opts["--targets"], %opts["--ports"], %opts["--discovery"],
             %opts["--maxconn"], %opts["--pid"], %opts["--arch"], &portscan_cb);
}
