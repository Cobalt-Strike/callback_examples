
# get_domain_cb is used to process output from 'net domain'
# command 
#
# Arguments
# $1 - beacon id
# $2 - result - output of the 'net domain' command
# $3 - info - Map containing information about the result
# $4 - opts - Map containing information about the command that was ran
#
sub get_domain_cb {
   # Declare local variables
   local('$bid $result %info');

   # Assign parameters user friendly names
   ($bid, $result, %info) = @_;
   #println("**** get_domain_cb");
   #println("**** arg1 (bid): $bid");
   #print("**** arg2 (result): $result");
   #println("**** arg3 (info): " . %info);
   #println("**** arg4 (opts): " . %opts);

   # Skip registered and complete events
   if ("job_registered" eq %info["type"] || "job_completed" eq %info["type"]) {
      return;
   }

   # Log the output back to beacon console
   bjoblog($bid, %info['jid'], "received output:\n" . "get_domain_cb " . $result);

   #println("**** get_domain_cb done");
}


beacon_command_register(
   "cs_get_domain",
   "Request the domain name information for specified target system (default: localhost)",

   "Request the domain name information for specified target system (default: localhost)\n\n" .

   "Usage:\n" .
   "   cs_get_domain [options]\n\n" .

   "Arguments:\n" .
   "   \$1 - beacon id (CS automatically adds this argument)\n\n" .

   "Optional arguments (specified in any order):\n" .
   "   --target=<target> - where to send the 'net domain' command to\n" .
   "   --pid=<pid>       - pid to inject into or use for fork&run\n" .
   "   --arch=<arch>     - arch of the pid to inject into use for fork&run\n\n" .

   "Examples (fork and run):\n" .
   "  cs_get_domain\n" .
   "  cs_get_domain --target=sysA\n\n" .

   "Examples (process injection):\n" .
   "  cs_get_domain --pid=1234 --arch=x64\n" .
   "  cs_get_domain --pid=1234 --arch=x64 --target=sysA\n");

alias cs_get_domain {
   # Declare local variables
   local('$bid @valid_opts %opts $opt_cnt $opt_ind $opt $value $info');

   # Set the defaults
   %opts["--target"] = "localhost";

   # Assign parameters to the opts hash map
   $bid = @_[0];
   $opt_cnt = size(@_);
   @valid_opts = @("--target", "--pid", "--arch");
   for($opt_ind = 1; $opt_ind < $opt_cnt; $opt_ind++) {
      # Set the arg and value for this iteration
      $opt = @_[$opt_ind];
      $opt_ind++;
      $value = iff( $opt_ind >= $opt_cnt, $null, @_[$opt_ind] );

      # Do some simple validation on opt and value
      if ($opt !in @valid_opts) {
         berror($bid, "$opt is not a valid option.");
         return;
      }
      if ($value is $null || $value in @valid_opts) {
         berror($bid, "Missing or invalid value for the $opt option.");
         return;
      }

      # Save the opt and value into the opts hash
      %opts[$opt] = $value;
   }

   # Validate options
   if ( (%opts["--pid"] !is $null) || (%opts["--arch"] !is $null) ) {
      # At least one process injection options is used, validate them.
      if (!-isnumber %opts["--pid"] || %opts["--pid"] < 0) {
         berror($bid, "pid is not a valid: " . %opts["--pid"]);
         return;
      }
      if (%opts["--arch"] !in @("x86", "x64")) {
         berror($bid, "arch is not valid, must be x86 or x64.");
         return;
      }
   }

   # Build the info message
   $info = "beacon: $bid will execute \'net domain\' on \'" . %opts["--target"] . "\'";

   # Print some info to the script console
   if (%opts["--pid"] >= 0 && %opts["--arch"] in @("x86", "x64")) {
      println("$info using process injection: \(\'" . %opts["--pid"] . "\' \'" . %opts["--arch"] . "\'\)");
   } else {
      println("$info using fork&run");
   }

   # Use the lambda function in order to pass local variables via Pass by Name to the callback
   bnet($bid, "domain", %opts["--target"], $null, %opts["--pid"], %opts["--arch"],
      lambda({ get_domain_cb($1, $2, $3 %opts); }, \%opts));
}

